import pymongo
from pymongo import MongoClient
import requests


client = MongoClient('xxxxxxxx') # Replace <db_password> with the actual password
db = client.sample_mflix
collection = db.movies

"""items = collection.find().limit(5)  # Example operation to verify connection
for item in items:
    print(item)
    print("\n") """        

hf_token = "xxxxx"  # Replace with your actual Hugging Face token
embedding_url = "https://router.huggingface.co/hf-inference/models/sentence-transformers/all-MiniLM-L6-v2/pipeline/feature-extraction" # hugging face allminilm has many features like voiceconversion, similarilty search etc we have used feature extraction 

def generate_embedding(text: str) -> list[float]:

  response = requests.post(
    embedding_url,
    headers={"Authorization": f"Bearer {hf_token}"},
    json={"inputs":text, "options":{"wait_for_model":True}}
    )

  if response.status_code != 200:
      raise ValueError(f"Request failed with status code {response.status_code}: {response.text}")
    
  return response.json()

# print(generate_embedding("freecodecamp is awesome")) #Test the function to generate embeddings 

# for doc in collection.find({"plot": {"$exists": True}}).limit(60):
#     doc['plot_embedding_hf'] = generate_embedding(doc['plot'])
#     collection.replace_one({'_id': doc['_id']}, doc)
#     print(f"Processed document ID: {doc['_id']}")

query = "A story about an immigrant"    

results= collection.aggregate([
    {"$vectorSearch": {
        "queryVector": generate_embedding(query),
        "path": "plot_embedding_hf",
        "numCandidates": 100,
        "limit": 4,
        "index": "Plot_semantic_search"
    }}
    ])

for document in results:
    print(f'Movie Name: {document["title"]},\nMovie Plot: {document["plot"]}\n')

    
